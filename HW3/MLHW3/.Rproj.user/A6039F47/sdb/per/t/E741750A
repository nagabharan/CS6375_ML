{
    "contents" : "# Check for the requried packages and install them\nif (!require(\"rpart\")) \n{\n    install.packages(\"rpart\") \n    library(\"rpart\")\n}\n\nif (!require(\"e1071\")) {\n    install.packages(\"e1071\") \n    library(\"e1071\")\n}\n\nif (!require(\"party\")) {\n    install.packages(\"party\") \n    library(\"party\")\n    \n}\n\nif(!require(\"class\"))\n{\n    install.packages(\"class\")\n    library(\"class\")\n}\n\nif(!require(\"neuralnet\"))\n{\n    install.packages(\"neuralnet\")\n    library(\"neuralnet\")\n}\n\nif(!require(\"nnet\"))\n{\n    install.packages(\"nnet\")\n    library(\"nnet\")\n}\n\n# Read from URL\ndataURL<-as.character('http://archive.ics.uci.edu/ml/machine-learning-databases/ionosphere/ionosphere.data')\nd<-read.csv(dataURL,header = FALSE,sep = \",\")\n\n# Remove NA and ? in dataset\nd <- na.omit(d)\nd[d==\"NA\"] <- 0\nd[d==\"?\"] <- 0\n\n# Init arrays to store 10 sample accuracies \ndts<- numeric(10)\nsvms<- numeric(10)\nnbs<- numeric(10)\nlrs<- numeric(10)\nnns<- numeric(10)\n\n# Class attribute is column 35 ie V35\n\n# Run 10 samples\nfor(i in 1:10) \n{\n    cat(\"Running sample \",i,\"\\n\")\n    \n    # Generate Train and Test datasets 80/20 split\n    sampleInstances<-sample(nrow(d),size = 0.8*nrow(d))\n    trainingData <- d[sampleInstances,]\n    testData <- d[-sampleInstances,]\n    \n    # Decision Tree\n    method <-\"Decision Tree\"\n    # Model\n    dtmodel <- rpart(as.factor(V35) ~ ., data = trainingData, parms=list(split=\"information\"), method =\"class\", minsplit=1)\n    prunedTree <- prune(dtmodel, cp =0.03)\n    # Predict\n    dTPredict <- predict(prunedTree, newdata = testData, type = \"class\")\n    # Accuracy\n    dTTable <- table(testData$V35, dTPredict)\n    dTCorrect <- sum(diag(dTTable))\n    dTError <- sum(dTTable)-dTCorrect\n    dts[i] <- (dTCorrect / (dTCorrect+dTError))*100\n    cat(\"Method = \", method,\", accuracy= \", dts[i],\"\\n\")\n    \n    # SVM\n    method <-\"SVM\"\n    # Model\n    svmmodel <- svm(as.factor(V35) ~ ., data = trainingData, method=\"C-classification\")\n    # Predict\n    sVMPredict <- predict(svmmodel, testData,type = \"class\")\n    # Accuracy\n    sVMTable <- table(testData$V35, sVMPredict)\n    sVMCorrect <- sum(diag(sVMTable))\n    sVMError <- sum(sVMTable)-sVMCorrect\n    svms[i] <- (sVMCorrect / (sVMCorrect+sVMError))*100\n    cat(\"Method = \", method,\", accuracy= \", svms[i],\"\\n\")\n    \n    # Naive Bayes\n    method <-\"Naive Bayes\"\n    # Model\n    nbmodel <- naiveBayes(as.factor(V35) ~ ., data = trainingData,laplace=5)\n    # Prediction\n    nBPredict<- predict(nbmodel,testData)\n    # Accuracy\n    nBTable <- table(testData$V35, nBPredict)\n    nBCorrect <- sum(diag(nBTable))\n    nBError <- sum(nBTable)-nBCorrect\n    nbs[i] <- (nBCorrect / (nBCorrect+nBError))*100\n    cat(\"Method = \", method,\", accuracy= \", nbs[i],\"\\n\")\n    \n    # Perceptron\n    method <-\"Perceptron\"\n    # Model\n    lrmodel <- glm(as.factor(V35)~., data = trainingData, family = \"binomial\") \n    # Predict\n    lRPredict<-predict(lrmodel,testData, type=\"response\")\n    threshold=0.85\n    lRPrediction<-sapply(lRPredict, FUN=function(x) if (x>threshold) 1 else 0)\n    actual<-as.integer(testData$V35)\n    # Accuracy\n    accuracy <- sum(actual==lRPrediction)/length(actual)\n    lrs[i] <- accuracy*100\n    cat(\"Method = \", method,\", accuracy= \", lrs[i],\"\\n\")\n    \n    # Neural Net\n    method <-\"Neural Net\"\n    # Model\n    nnetmodel <- nnet(as.integer(V35)~., trainingData,size=1)\n    # Predict\n    pred <- predict(nnetmodel, testData)\n    # Accuracy\n    neural <- table(pred,testData$V35)\n    nns[i] <- sum(diag(neural))/sum(neural) *100\n    cat(\"Method = \", method,\", accuracy= \", nns[i],\"\\n\")\n    \n}\n\n# Writing to file\nsink(\"Output 5.txt\")\ncat(\"No. of Instances: \",nrow(d))\ncat(\"\\n\")\ncat(\"No. of Atrributes: \",ncol(d))\ncat(\"\\n\")\ncat(\"\\nOutput for Ionosphere Dataset: \",dataURL)\ncat(\"\\n\\nDecision Tree Accuracy Array: \",dts)\ncat(\"\\n\")\ncat(\"\\nSVM Accuracy Array: \",svms)\ncat(\"\\n\")\ncat(\"\\nNaive Bayes Accuracy Array: \",nbs)\ncat(\"\\n\")\ncat(\"\\nLogistic Regression Accuracy Array: \",lrs)\ncat(\"\\n\")\ncat(\"\\nNeural Network Accuracy Array: \",nns)\ncat(\"\\n\")\n\n# Accuracy of 10 iterations\ncat(\"\\nAccuracy for 10 iterations\")\ndTAvg <- sum(dts)/10\ncat(\"\\n\\nAverage accuracy of 10 samples in Decision Tree Classifier: \",dTAvg)\ncat(\"\\n\")\n\nsVMAvg <- sum(svms)/10\ncat(\"\\nAverage accuracy of 10 samples in SVM Classifier: \",sVMAvg)\ncat(\"\\n\")\n\nnBAvg <- sum(nbs)/10\ncat(\"\\nAverage accuracy of 10 samples in Naive Bayes Classifier: \",nBAvg)\ncat(\"\\n\")\n\nlRAvg <- sum(lrs)/10\ncat(\"\\nAverage accuracy of 10 samples in Logistic Regression Classifier: \",lRAvg)\ncat(\"\\n\")\n\nnNAvg <- sum(nns)/10\ncat(\"\\nAverage accuracy of 10 samples in Neural Network Classifier: \",nNAvg)\ncat(\"\\n\")\nsink()",
    "created" : 1457297026582.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "708459099",
    "id" : "E741750A",
    "lastKnownWriteTime" : 1457297036,
    "path" : "C:/Users/nagabharan/Desktop/Spring 16/ML/HW/MLHW3/Dataset5.R",
    "project_path" : "Dataset5.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}